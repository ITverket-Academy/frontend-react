import { useQuery } from "@tanstack/react-query";
import { useEffect, useState } from "react";
import { getProduct } from "../components/product/productQueries";
import Select from "../components/select/Select";
import truckIcon from "../assets/truck.svg";
import undoIcon from "../assets/undo.svg";
import { useParams } from "react-router-dom";
import { cartAtom, Size } from "../components/cart/cartAtom";
import { useAtom } from "jotai";

/*
üó®Ô∏è P√• denne siden skal vi vise et enkelt produkt, la brukeren velge st√∏rrelse og legge det til i handlekurven.
For √• oppn√• dette, m√• vi kunne vise brukeren det produktet han √∏nsker √• se p√•. Dette kan vi gj√∏re ved √• bruke id-er til √• hente ut spesifikke produkter.
For √• demonstrere, g√• inn p√• denne siden: http://localhost:8000/product/1
Her vil vi se "Nike Sportswear - T-shirt - black/white"-produktet. Dette fikk vi til ved √• s√∏ke opp produktet etter ID-en. ID-en hentet vi fra URL-en, som dere ser:
http://localhost:8000/product/1 <-- Her er ID-en 1. Hvis dere fors√∏ker √• bytte ut 1 med 2 eller 3, vil dere f√• andre produkter.

Dere tenker kanskje: Men hvor er s√∏keparameteret? Her benytter vi oss ikke av s√∏keparametre. S√∏keparametre er fint √• bruke n√•r man kan s√∏ke p√• forskjellige ting, og vi ikke helt vet hva vi skal vise.
For eksempel, et s√∏k kan ha flere parametre. I v√•rt eksempel brukte vi kun det brukeren s√∏kte p√•, og la det i parameteret "q", men vi kunne ogs√• latt brukeren velge en kategori i tillegg. Da ville vi hatt to parametre, "q" og "c",
og URL-en ville sett slik ut: http://localhost:8000/search?q=nike&c=shoes - Det som er fint med √• bruke s√∏keparametre, er at man kan bruke et eller flere, og de kan komme i hvilken som helst rekkef√∏lge eller kombinasjon.
Den funksjonaliteten beh√∏ver vi derimot ikke n√•r vi vet hva vi skal hente, og vi kan derfor lage en URL som ser litt ryddigere ut ved √• bruke dynamic routes. I routeren v√•r har vi satt opp en route som ser slik ut: /product/:productId
Her sier vi at, n√•r vi er p√• /product/, s√• er det som kommer neste en parameter av typen productId. Da kan vi bruke dette til √• enkelt hente ut ID-en fra URL-en.

Oppgaven deres p√• denne siden blir derfor √• hente produktet som brukeren har g√•tt inn p√•, la han velge st√∏rrelse, og legge det til i handlekurven.
*/

// Array av st√∏rrelser vi selger.
const sizeOptions = ["XXL", "XL", "L", "M", "S", "XS"];

const ProductPage = () => {
  // üí°Vi kan hente ut id-en til produktet via useParams
  const params = useParams();

  // ‚öíÔ∏è lag en state som holder hvilken st√∏rrelse brukeren har valgt.

  // üí° ta i bruk cart-atomen som vi har laget p√• forh√•nd.
  // const [cart, setCart] = useAtom(cartAtom);

  // ‚öíÔ∏è Fullf√∏r funksjonaliteten i hooken under, slik at vi kan sette tittelen til tabben v√•r!
  // Filen til hooken finner du i app -> src -> hooks -> useTitle.ts.
  // Kommenter ut linjen under n√•r du har fullf√∏rt funkjsonaliteten.
  // const [ title, setTitle ] = useTitle();

  // üó®Ô∏è Vi bruker productId-parameteret i URL-en v√•r til √• hente riktig produkt.
  const { isLoading, isError, data } = useQuery({
    queryKey: ["product"],
    queryFn: () => getProduct(params.productId),
  });

  if (isLoading) return <h1>Loading...</h1>;
  if (isError) return <h1>An error occured...</h1>;
  // ‚öíÔ∏è Lag en return case i tilfellet vi ikke finner produktet.

  useEffect(() => {
    // ‚öíÔ∏è Sett tittelen til tabben v√•r til navnet p√• produktet ved √• bruke useTitle-hooken v√•r.
    
    // ‚öíÔ∏è S√∏rg for at denne kun kj√∏res n√•r produktet er lastet inn.
  }, []);

  const addToCart = () => {
    // ‚öíÔ∏è Hvis brukeren ikke har valgt en st√∏rrelse, vil vi ikke kj√∏re resten av logikken i denne funksjonen.

    // ‚öíÔ∏è Se om produktet allerede ligger i handlekurven.
    
    // ‚öíÔ∏è Hvis produktet ligger i kurven, oppdaterer vi antall, hvis ikke, legger vi det til.
    
    // ‚öíÔ∏è Oppdater handlekurven med den nye listen.
  };

  return (
    <main className="main container">
      <div className="product-page-row">
        {/*üßπ Fjern kommentaren under n√•r du har klart √• hente produktet. */}
        {/* <img className="product-page-img" src={product.image} /> */}
        <div>
          {/*üßπ Fjern kommentaren under n√•r du har klart √• hente produktet. */}
          {/* <div>
            <h1 className="title font-normal">{product.name}</h1>
            <h2 className="title">{product.details}</h2>
            <h3 className="subtitle">
              {product.price} kr <span className="font-light">inkl. mva.</span>
            </h3>
          </div> */}
          <div className="product-button-container">
            {/*‚öíÔ∏è Fullf√∏r funksjonaliteten til Select-komponenten under.*/}
            {/* 
            <Select
              onChange={(value) => setSize(value as Size)}
              value={size}
              options={sizeOptions}
            /> */}
            <button className="black-button mt-1" onClick={addToCart}>
              Legg i handlekurven
            </button>
          </div>
          <div className="product-shipping">
            <div className="product-shipping-container">
              <div className="product-icon">
                <img src={truckIcon} alt="Shipping icon" />
              </div>
              <p className="font-bold">2-6 virkedager</p>
              <p className="font-light">Rask leveranse</p>
              <p className="font-bold">Gratis</p>
            </div>
            <div className="product-return">
              <div className="product-shipping-container row align-center">
                <div className="product-icon">
                  <img src={undoIcon} alt="undo icon" />
                </div>
                <p className="font-bold">100 dagers √•pent kj√∏p</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
};

export default ProductPage;
